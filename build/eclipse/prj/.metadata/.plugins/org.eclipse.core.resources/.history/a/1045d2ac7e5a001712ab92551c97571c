/*
 * connection_manager.c
 *
 *  Created on: 24 mai 2017
 *      Author: jsanchez
 */


#include "svc_uart.h"
#include "clibs.h"
#include "gnss_data.h"
#include "gnss_debug.h"
#include "libs/cJSON.h"
#include "libs/picohttpparser.h"
#include "POW_app.h"

#define IMEI "8888888885"
#define latitude_s "48.85578817"
#define longitude_s "2.36069871"

#define GET_COMMAND "GET /http?imei="IMEI"&position="latitude_s","longitude_s" HTTP/1.1"
#define GET_COMMAND_SUBST "GET /http?imei="IMEI"&position=%2.8f,%1.8f HTTP/1.1"


#define FLEET_ID "5721489412194304"
#define POST_COMMAND_BASE "POST /api/fleets/"FLEET_ID"/trackers/"
#define POST_COMMAND "POST /api/fleets/"FLEET_ID"/trackers/2/positions HTTP/1.1"
#define POST_COMMAND_SUBST  "POST /api/fleets/"FLEET_ID"/trackers/ HTTP/1.1"
#define POST_COMMAND_POSITIONS "/positions HTTP/1.1"


#define CONTENT "Content-Length: 62\0"
#define CONTENT_SUBS "Content-Length: %d\0"

//#define PORT 1
#define PDN 1
#define _AT(x) x"\r\n"

int PORT=1;

char * HTTP_PACKAGE[] = { GET_COMMAND,
    "Host: 1.cloud-logger-159118.appspot.com",
    "Connection: keep-alive",
    "Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8",
    "User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/40.0.2214.91 Safari/537.36",
    "X-Client-Data: CIm2yQEIprbJAQiptskBCMG2yQEInobKAQjsiMoB",
    "Accept-Encoding: gzip, deflate, sdch",
    "Accept-Language: es,en-US;q=0.8,en;q=0.6,fr;q=0.4"};


char * HTTP_POST_PACKAGE[] = {POST_COMMAND,
    "Host: cloud-logger-159118.appspot.com",
    "Accept: */*",
    "User-Agent: runscope/0.1",
    "Accept-Encoding: gzip, deflate, sdch"

};

boolean_t openSocket(){

  // Just need to config the sockets once
  if(!at_configure_socket(PORT,PDN,0,0,600,50)){
    report_error(" - sqnscfg failed");
    //return FALSE;
  }
  if(!at_extended_configure_socket(PORT,1,0,0)){
    report_error(" - sqnscfgext failed");
    //return FALSE;
  }

  if(!send_at_wait_response(_AT("at+sqnsd=1,0,80,\"cloud-logger-159118.appspot.com\",0,8000,1"),"OK", 100)){
    report_error(" - sqnsd failed");
    return FALSE;
  }
}

void send_control_z(){
  send_at_get_response("\032", gpOS_TIMEOUT_IMMEDIATE);
  //send_at( "\032");
}

void apply_new_config(char * json){
  cJSON * root = cJSON_Parse(json);
  cJSON *data = cJSON_GetObjectItemCaseSensitive(root, "data");
  cJSON *attributes = cJSON_GetObjectItemCaseSensitive(data, "attributes");
  cJSON *report_every_n_fixes_item = cJSON_GetObjectItemCaseSensitive(attributes, "report_every_n_fixes");
  cJSON *fix_period_s_item = cJSON_GetObjectItemCaseSensitive(attributes, "fix_period_s");
  cJSON_Print(attributes);
  GPS_DEBUG_MSG(( "[POW_app] config = %s\r\n", attributes));
  if (cJSON_IsNumber(report_every_n_fixes_item))
  {
    config.report_every_n_fixes = report_every_n_fixes_item->valuedouble;
    GPS_DEBUG_MSG(( "[POW_app] report_every_n_fixes = %d\r\n", config.report_every_n_fixes));
  }else{
    GPS_DEBUG_MSG(( "[POW_app] report_every_n_fixes not a number \r\n"));
  }
  if (cJSON_IsNumber(fix_period_s_item))
  {
    config.fix_period_s = fix_period_s_item->valuedouble;
    GPS_DEBUG_MSG(( "[POW_app] fix_period_s = %d\r\n", config.fix_period_s));
  }

  free(json);
  cJSON_Delete(root);


}

void analyse_response(char * response){

  int i;
  size_t num_headers=0;
  for(i=0;i<mystrlen(response)-7; i++){
      if(response[i]=='\r' && response[i+1]=='\n' && response[i+2]!='\r'){      //TO-DO Could be done better (count just before the payload to avoid fake positives)
        num_headers++;
      }
    }


  int minor_version;
  int status;
  const char *msg;
  size_t msg_len;
  struct phr_header headers[num_headers];



  int pret;
  while (1) {

    // parse the reponse
    pret = phr_parse_response(response, strlen(response), &minor_version, &status, &msg, &msg_len, headers, &num_headers, 0);
    if (pret > 0)
      break;  //successfully parsed the request
    else if (pret == -1){
      GPS_DEBUG_MSG(( "[POW_app] PARSING ERROR\r\n"));
      break;
    }
    // request is incomplete, continue the loop
  }

  //GPS_DEBUG_MSG(( "[POW_app] respuesta %s\r\n", response));

  int payload_size = mystrlen(response)-pret+1;
  char payload[1500];
  switch (status){
    case 201:         // CREATED -> new config
      GPS_DEBUG_MSG(( "[POW_app] Code 201 detected, searching the payload... \r\n"));
      memcpy(payload, response + pret, payload_size);
      payload[payload_size] = '\0';
      GPS_DEBUG_MSG(( "[POW_app] payload = %s\r\n", payload));
      apply_new_config(payload);
      break;
    case 204:         // NO CONTENT -> nothing special
      GPS_DEBUG_MSG(( "[POW_app] Positions well received by the cloud server\r\n"));
      break;
    default:          // NOT EXPECTED / ERROR
      GPS_DEBUG_MSG(( "[POW_app] ERROR: The cloud server answered with a code %d\r\n", status));
      break;
  }

  free(response);

}



void send_http_package(Gnss_data *positions, tUInt n_positions){

  //Building the body (needed for Content-Length)

  cJSON *root;
  cJSON *data;
  root = cJSON_CreateObject();
  cJSON_AddItemToObject(root, "data", data = cJSON_CreateArray());

  int i;
  for(i=0; i<n_positions; i++){
    cJSON *position;
    cJSON *geopoint;
    cJSON_AddItemToArray(data, position = cJSON_CreateObject());
    cJSON_AddStringToObject(position, "type", "positions");
    cJSON_AddItemToObject(position, "attributes", geopoint = cJSON_CreateObject());
    GPS_DEBUG_MSG(( "[POW_app] Las lat y long valen %.8f   y   %.8f \r\n", positions[i].pos.latitude, positions[i].pos.longitude));
    char str[20];
    _clibs_sprintf(str, "%.8f,%.8f\0", positions[i].pos.latitude,positions[i].pos.longitude);
    cJSON_AddStringToObject(geopoint, "geo_point", str);

  }

  char *rendered = cJSON_Print(root);
  remove_all_chars(rendered, '\n');
  remove_all_chars(rendered, '\t');
  remove_all_chars(rendered, '\r');

  //Sending header

  tU8 buff[] = POST_COMMAND;

  send_at(buff);
  send_at("\r\n");

  for(i=1; i<(sizeof(HTTP_POST_PACKAGE)/sizeof(*HTTP_POST_PACKAGE)); i++){
    send_at(HTTP_POST_PACKAGE[i]);
    send_at("\r\n");
  }

  //Content-Length
  int length_payload_per_position = mystrlen(rendered);
  char str[18];
  _clibs_sprintf(str, "Content-Length: %d\0", length_payload_per_position);
  send_at(str);

  send_at("\r\n");
  send_at("\r\n");

  // HEADER FINISHED

  send_at(rendered);


  free(rendered);
  cJSON_Delete(root);

  send_at("\r\n");
  send_at("\r\n");



}
