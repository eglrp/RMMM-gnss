//!
//!   \file     lld_uart.h
//!   \copyright (c) STMicroelectronics
//!   \brief    <i><b>UART low level driver header file</b></i>
//!   \author   Fulvio Boggia
//!   \version  1.0
//!   \date     2010.09.01

#ifndef LLD_UART_H
#define LLD_UART_H

/*****************************************************************************
   includes
*****************************************************************************/

#include "lld.h"

#ifdef __cplusplus
extern "C" {
#endif

//!   \addtogroup LLD
//!   \{
//!   \addtogroup UART
//!   \{
//!   \addtogroup UART_defines
//!   \{

/*****************************************************************************
   defines and macros (scope: module-local)
*****************************************************************************/

/*****************************************************************************
   typedefs and structures (scope: module-local)
*****************************************************************************/

//! \brief UART id type
typedef void * LLD_UART_IdTy;

//! \brief Baud rates
typedef enum
{
  LLD_UART_300_BPS      = 300,          /**< 300 */
  LLD_UART_600_BPS      = 600,          /**< 600 */
  LLD_UART_1200_BPS     = 1200,         /**< 1200 */
  LLD_UART_2400_BPS     = 2400,         /**< 2400 */
  LLD_UART_4800_BPS     = 4800,         /**< 4800 */
  LLD_UART_9600_BPS     = 9600,         /**< 9600 */
  LLD_UART_14400_BPS    = 14400,        /**< 14400 */
  LLD_UART_19200_BPS    = 19200,        /**< 19200 */
  LLD_UART_38400_BPS    = 38400,        /**< 38400 */
  LLD_UART_57600_BPS    = 57600,        /**< 57600 */
  LLD_UART_115200_BPS   = 115200,       /**< 115200 */
  LLD_UART_230400_BPS   = 230400,       /**< 230400 */
  LLD_UART_460800_BPS   = 460800,       /**< 460800 */
  LLD_UART_921600_BPS   = 921600,       /**< 921600 */
  LLD_UART_1843200_BPS  = 1843200,      /**< 1843200 */
  LLD_UART_2400000_BPS  = 2400000,      /**< 2400000 */
  LLD_UART_3000000_BPS  = 3000000,      /**< 3000000 */
  LLD_UART_3686400_BPS  = 3686400,      /**< 3686400 */
  LLD_UART_4800000_BPS  = 4800000,      /**< 4800000 */
  LLD_UART_6000000_BPS  = 6000000,      /**< 6000000 */
  LLD_UART_FPGA_BPS     = 92000         /**< 92000 */
}
LLD_UART_BaudRateTy;

//! \brief Stop bits allowed by UART peripheral
typedef enum
{
  LLD_UART_ONE_STOP_BITS,    /**< 0 */
  LLD_UART_TWO_STOP_BITS     /**< 1 */
}
LLD_UART_StopBitsTy;

//! \brief Data format allowed by UART peripheral
typedef enum
{
  LLD_UART_FIVE_BITS,     /**< 0 */
  LLD_UART_SIX_BITS,      /**< 1 */
  LLD_UART_SEVEN_BITS,    /**< 2 */
  LLD_UART_EIGTH_BITS     /**< 3 */
}
LLD_UART_DataLenTy;

//! \brief Parity settings
typedef enum
{
  LLD_UART_NO_PARITY,       /**< 0 */
  LLD_UART_EVEN_PARITY,     /**< 1 */
  LLD_UART_ODD_PARITY,      /**< 2 */
  LLD_UART_SPS_ONE_PARITY,  /**< 3 */
  LLD_UART_SPS_ZERO_PARITY  /**< 4 */
}
LLD_UART_ParityTy;

//! \brief Interrupt masks types generated by UART peripheral
typedef enum
{
  // Modem interrupt masks
#if defined( LLD_UART_VER_5_1_2_0)
  LLD_UART_RI_INT_MASK            =  0x0001,  /**< 0x0001 */
  LLD_UART_CTS_INT_MASK           =  0x0002,  /**< 0x0002 */
  LLD_UART_DCD_INT_MASK           =  0x0004,  /**< 0x0004 */
  LLD_UART_DSR_INT_MASK           =  0x0008,  /**< 0x0008 */
#elif defined( LLD_UART_VER_5_1_10_0)
  // Modem interrupt masks
  LLD_UART_CTS_INT_MASK           =  0x0002,  /**< 0x0002 */
#endif

  // Reception and transmission interrupt masks
  LLD_UART_RX_INT_MASK            =  0x0010,  /**< 0x0010 */
  LLD_UART_TX_INT_MASK            =  0x0020,  /**< 0x0020 */
  LLD_UART_TIMEOUT_INT_MASK       =  0x0040,  /**< 0x0040 */

  // Error interrupt masks
  LLD_UART_FRAME_ERROR_INT_MASK   =  0x0080,  /**< 0x0080 */
  LLD_UART_PARITY_ERROR_INT_MASK  =  0x0100,  /**< 0x0100 */
  LLD_UART_BREAK_ERROR_INT_MASK   =  0x0200,  /**< 0x0200 */
  LLD_UART_OVERRUN_ERROR_INT_MASK =  0x0400,  /**< 0x0400 */

#if defined( LLD_UART_VER_5_1_10_0)
  LLD_UART_XOFF_INT_MASK          =  0x0800,  /**< 0x0800 */
  LLD_UART_TXFE_INT_MASK          =  0x1000,  /**< 0x1000 */
#endif

  LLD_UART_ALL_ERROR_INT_MASK     =  0x0780,  /**< 0x0780 */
  LLD_UART_ALLRECEIVE_INT_MASK    =  0x07D0,  /**< 0x07D0 */

#if defined( LLD_UART_VER_5_1_2_0)
  LLD_UART_ALL_INT_MASK           =  0x0FFF   /**< 0x0FFF */
#elif defined( LLD_UART_VER_5_1_10_0)
  LLD_UART_ALL_INT_MASK           =  0x1FFF   /**< 0x1FFF */
#endif
} LLD_UART_IRQSrcIdTy;

//! \brief Interrupt bitfield
typedef tUInt LLD_UART_IRQSrcTy;

#if defined( LLD_UART_VER_5_1_2_0)
#define LLD_UART_XOFF_INT_MASK  0
#define LLD_UART_TXFE_INT_MASK  0
#endif

#if defined( LLD_UART_VER_5_1_10_0)
#define LLD_UART_RI_INT_MASK    0
#define LLD_UART_DCD_INT_MASK   0
#define LLD_UART_DSR_INT_MASK   0
#endif

//! \brief Rx/Tx Fifo TriggerLevel
typedef enum
{
  LLD_UART_1_BYTES_TRIGGER_LEVEL  = 0x0,  /**< 0x0 */
  LLD_UART_2_BYTES_TRIGGER_LEVEL  = 0x1,  /**< 0x1 */
  LLD_UART_4_BYTES_TRIGGER_LEVEL  = 0x2,  /**< 0x2 */
  LLD_UART_8_BYTES_TRIGGER_LEVEL  = 0x3,  /**< 0x3 */
  LLD_UART_16_BYTES_TRIGGER_LEVEL = 0x4,  /**< 0x4 */
  LLD_UART_32_BYTES_TRIGGER_LEVEL = 0x5,  /**< 0x5 */
  LLD_UART_48_BYTES_TRIGGER_LEVEL = 0x6   /**< 0x6 */
}
LLD_UART_FifoLevelTy;

//! \brief DMA enable types
typedef enum
{
  LLD_UART_DMA_RX    = BIT_0,    /**< 0x1 */
  LLD_UART_DMA_TX    = BIT_1,    /**< 0x2 */
  LLD_UART_DMA_ERR   = BIT_2,    /**< 0x4 */
}
LLD_UART_DMATy;

//! \brief Software Transmit Flow Control Mode
typedef enum
{
  LLD_UART_SWFLOWCTRLMODE_DISABLED,               /**< 0 */
  LLD_UART_SWFLOWCTRLMODE_XON1_XOFF1,             /**< 1 */
  LLD_UART_SWFLOWCTRLMODE_XON2_XOFF2,             /**< 2 */
  LLD_UART_SWFLOWCTRLMODE_XON1_XON2_XOFF1_XOFF2   /**< 3 */
}
LLD_UART_SwFlowCtrlModeTy;

//! \brief Used to select Xon1, Xon2, Xoff1 or Xoff2
typedef enum
{
  LLD_UART_XONXOFF_XON1,   /**< 0 */
  LLD_UART_XONXOFF_XON2,   /**< 1 */
  LLD_UART_XONXOFF_XOFF1,  /**< 2 */
  LLD_UART_XONXOFF_XOFF2   /**< 3 */
}
LLD_UART_XonXOffTy;

// Line below should be erased once Autobaud is working
/*! \endcond */

/*****************************************************************************
   exported defines
*****************************************************************************/
// Line below should be erased once Autobaud is working

/*****************************************************************************
   exported variables
*****************************************************************************/
//!   \}
//!   \}
//!   \}

/*****************************************************************************
   exported function prototypes
*****************************************************************************/

extern tU8                LLD_UART_ReadRxFifo                 ( const LLD_UART_IdTy id);
extern tVoid              LLD_UART_WriteTxFifo                ( const LLD_UART_IdTy id, tU8 data);
extern tU32               LLD_UART_DataRegAddress             ( const LLD_UART_IdTy id);
extern LLD_UART_IRQSrcTy  LLD_UART_GetInterruptStatus         ( const LLD_UART_IdTy id);
extern LLD_UART_IRQSrcTy  LLD_UART_GetInterruptMask           ( const LLD_UART_IdTy id);
extern LLD_UART_IRQSrcTy  LLD_UART_GetRawInterruptStatus      ( const LLD_UART_IdTy id);
extern tU16               LLD_UART_GetFlagRegister            ( const LLD_UART_IdTy id);
extern tU16               LLD_UART_GetIBRDRegister            ( const LLD_UART_IdTy id);
extern tVoid              LLD_UART_ClearInterrupt             ( const LLD_UART_IdTy id, LLD_UART_IRQSrcTy irq_mrask);
extern tBool              LLD_UART_IsInterruptRaised          ( const LLD_UART_IdTy id, LLD_UART_IRQSrcTy interrupt_mask);
extern tBool              LLD_UART_IsTxFifoEmpty              ( const LLD_UART_IdTy id);
extern tBool              LLD_UART_IsTxFifoFull               ( const LLD_UART_IdTy id);
extern tBool              LLD_UART_IsRxFifoEmpty              ( const LLD_UART_IdTy id);
extern tBool              LLD_UART_IsRxFifoFull               ( const LLD_UART_IdTy id);
extern tBool              LLD_UART_IsBusy                     ( const LLD_UART_IdTy id);
extern tVoid              LLD_UART_Enable                     ( const LLD_UART_IdTy id);
extern tVoid              LLD_UART_Disable                    ( const LLD_UART_IdTy id);
extern tVoid              LLD_UART_TxReset                    ( const LLD_UART_IdTy id);
extern tVoid              LLD_UART_RxReset                    ( const LLD_UART_IdTy id);
extern tVoid              LLD_UART_FifoEnable                 ( const LLD_UART_IdTy id);
extern tVoid              LLD_UART_FifoDisable                ( const LLD_UART_IdTy id);
extern tVoid              LLD_UART_RxEnable                   ( const LLD_UART_IdTy id);
extern tVoid              LLD_UART_RxDisable                  ( const LLD_UART_IdTy id);
extern tVoid              LLD_UART_TxEnable                   ( const LLD_UART_IdTy id);
extern tVoid              LLD_UART_TxDisable                  ( const LLD_UART_IdTy id);
extern tVoid              LLD_UART_SetBaudRate                ( const LLD_UART_IdTy id, tU32 sys_bus_frequency, LLD_UART_BaudRateTy baudrate);
extern tBool              LLD_UART_CheckBaudRateReachability  ( tU32 bus_freq, tU32 baudrate);
extern tVoid              LLD_UART_SetParity                  ( const LLD_UART_IdTy id, LLD_UART_ParityTy parity);
extern tVoid              LLD_UART_SetStopBits                ( const LLD_UART_IdTy id, LLD_UART_StopBitsTy stopBits);
extern tVoid              LLD_UART_SetDataLen                 ( const LLD_UART_IdTy id, LLD_UART_DataLenTy dataLen);
extern tVoid              LLD_UART_SetRxFifoTriggerLevel      ( const LLD_UART_IdTy id, LLD_UART_FifoLevelTy fifoLevel);
extern tVoid              LLD_UART_SetTxFifoTriggerLevel      ( const LLD_UART_IdTy id, LLD_UART_FifoLevelTy fifoLevel);
extern tVoid              LLD_UART_Config                     ( const LLD_UART_IdTy id, tU32 sys_bus_frequency, LLD_UART_BaudRateTy baudrate,LLD_UART_StopBitsTy stopBits,LLD_UART_DataLenTy dataLen,LLD_UART_ParityTy parity);
extern tVoid              LLD_UART_InterruptEnable            ( const LLD_UART_IdTy id,LLD_UART_IRQSrcTy intr);
extern tVoid              LLD_UART_InterruptDisable           ( const LLD_UART_IdTy id,LLD_UART_IRQSrcTy intr);
extern tVoid              LLD_UART_DMAEnable                  ( const LLD_UART_IdTy id,LLD_UART_DMATy type);
extern tVoid              LLD_UART_DMADisable                 ( const LLD_UART_IdTy id,LLD_UART_DMATy type);
extern tVoid              LLD_UART_IRDAEnable                 ( const LLD_UART_IdTy id);
extern tVoid              LLD_UART_IRDADisable                ( const LLD_UART_IdTy id);
extern tU8                LLD_UART_GetRxFifoTriggerLevel      ( const LLD_UART_IdTy id);
extern tU8                LLD_UART_GetTxFifoTriggerLevel      ( const LLD_UART_IdTy id);
extern tVoid              LLD_UART_INT_RxEnter                ( const LLD_UART_IdTy id);
extern tVoid              LLD_UART_INT_TxEnter                ( const LLD_UART_IdTy id);
extern tVoid              LLD_UART_INT_TimeoutEnter           ( const LLD_UART_IdTy id);

extern tVoid              LLD_UART_EnableHwFlowControl        ( const LLD_UART_IdTy id);
extern tVoid              LLD_UART_DisableHwFlowControl       ( const LLD_UART_IdTy id);
extern tVoid              LLD_UART_DisableLoopBack            ( const LLD_UART_IdTy id);
extern tVoid              LLD_UART_EnableLoopBack             ( const LLD_UART_IdTy id);
extern tVoid              LLD_UART_Clear_ErrorStatusReg       ( const LLD_UART_IdTy id);
extern tVoid              LLD_UART_ResetReg                   ( const LLD_UART_IdTy id);
extern tVoid              LLD_UART_EnableSwFlowControl        ( const LLD_UART_IdTy id, LLD_UART_SwFlowCtrlModeTy txmode, LLD_UART_SwFlowCtrlModeTy rxmode);
extern tVoid              LLD_UART_DisableSwFlowControl       ( const LLD_UART_IdTy id);
extern tVoid              LLD_UART_SetXonXoffValue            ( const LLD_UART_IdTy id, LLD_UART_XonXOffTy type, tU32 data);

extern tVoid              LLD_UART_TestModeEnable             ( const LLD_UART_IdTy id);
extern tVoid              LLD_UART_TestModeDisable            ( const LLD_UART_IdTy id);
extern tVoid              LLD_UART_TestModeSet                ( const LLD_UART_IdTy id, tU32 value);

extern tVoid              LLD_UART_RTS_set( const LLD_UART_IdTy id);
extern tVoid              LLD_UART_RTS_clear( const LLD_UART_IdTy id);
#endif // LLD_UART_H

// End of file
